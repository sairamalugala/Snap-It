{"version":3,"sources":["../node_modules/codemirror/mode/yaml-frontmatter/yaml-frontmatter.js","../node_modules/codemirror/mode/yaml/yaml.js"],"names":["CodeMirror","START","FRONTMATTER","BODY","defineMode","config","parserConfig","yamlMode","getMode","innerMode","base","localMode","state","mode","yaml","inner","startState","copyState","token","stream","match","end","sol","style","indent","a","b","m","Pass","blankLine","mod","require","keywordRegex","RegExp","join","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","literal","indentation","keyCol","pair","pairStart","inlinePairs","inlineList","next","lineComment","fold","defineMIME"],"mappings":"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","file":"static/js/29.5b036a57.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../yaml/yaml\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../yaml/yaml\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n\n  var START = 0, FRONTMATTER = 1, BODY = 2\n\n  // a mixed mode for Markdown text with an optional YAML front matter\n  CodeMirror.defineMode(\"yaml-frontmatter\", function (config, parserConfig) {\n    var yamlMode = CodeMirror.getMode(config, \"yaml\")\n    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"gfm\")\n\n    function localMode(state) {\n      return state.state == FRONTMATTER ? {mode: yamlMode, state: state.yaml} : {mode: innerMode, state: state.inner}\n    }\n\n    return {\n      startState: function () {\n        return {\n          state: START,\n          yaml: null,\n          inner: CodeMirror.startState(innerMode)\n        }\n      },\n      copyState: function (state) {\n        return {\n          state: state.state,\n          yaml: state.yaml && CodeMirror.copyState(yamlMode, state.yaml),\n          inner: CodeMirror.copyState(innerMode, state.inner)\n        }\n      },\n      token: function (stream, state) {\n        if (state.state == START) {\n          if (stream.match('---', false)) {\n            state.state = FRONTMATTER\n            state.yaml = CodeMirror.startState(yamlMode)\n            return yamlMode.token(stream, state.yaml)\n          } else {\n            state.state = BODY\n            return innerMode.token(stream, state.inner)\n          }\n        } else if (state.state == FRONTMATTER) {\n          var end = stream.sol() && stream.match(/(---|\\.\\.\\.)/, false)\n          var style = yamlMode.token(stream, state.yaml)\n          if (end) {\n            state.state = BODY\n            state.yaml = null\n          }\n          return style\n        } else {\n          return innerMode.token(stream, state.inner)\n        }\n      },\n      innerMode: localMode,\n      indent: function(state, a, b) {\n        var m = localMode(state)\n        return m.mode.indent ? m.mode.indent(m.state, a, b) : CodeMirror.Pass\n      },\n      blankLine: function (state) {\n        var m = localMode(state)\n        if (m.mode.blankLine) return m.mode.blankLine(m.state)\n      }\n    }\n  })\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"yaml\", function() {\n\n  var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n  var keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\n  return {\n    token: function(stream, state) {\n      var ch = stream.peek();\n      var esc = state.escaped;\n      state.escaped = false;\n      /* comments */\n      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n        return \"string\";\n\n      if (state.literal && stream.indentation() > state.keyCol) {\n        stream.skipToEnd(); return \"string\";\n      } else if (state.literal) { state.literal = false; }\n      if (stream.sol()) {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        /* document start */\n        if(stream.match('---')) { return \"def\"; }\n        /* document end */\n        if (stream.match('...')) { return \"def\"; }\n        /* array list item */\n        if (stream.match(/\\s*-\\s+/)) { return 'meta'; }\n      }\n      /* inline pairs/lists */\n      if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n        if (ch == '{')\n          state.inlinePairs++;\n        else if (ch == '}')\n          state.inlinePairs--;\n        else if (ch == '[')\n          state.inlineList++;\n        else\n          state.inlineList--;\n        return 'meta';\n      }\n\n      /* list separator */\n      if (state.inlineList > 0 && !esc && ch == ',') {\n        stream.next();\n        return 'meta';\n      }\n      /* pairs separator */\n      if (state.inlinePairs > 0 && !esc && ch == ',') {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        stream.next();\n        return 'meta';\n      }\n\n      /* start of value of a pair */\n      if (state.pairStart) {\n        /* block literals */\n        if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n        /* references */\n        if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable-2'; }\n        /* numbers */\n        if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n        if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n        /* keywords */\n        if (stream.match(keywordRegex)) { return 'keyword'; }\n      }\n\n      /* pairs (associative arrays) -> key */\n      if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n        state.pair = true;\n        state.keyCol = stream.indentation();\n        return \"atom\";\n      }\n      if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n      /* nothing found, continue */\n      state.pairStart = false;\n      state.escaped = (ch == '\\\\');\n      stream.next();\n      return null;\n    },\n    startState: function() {\n      return {\n        pair: false,\n        pairStart: false,\n        keyCol: 0,\n        inlinePairs: 0,\n        inlineList: 0,\n        literal: false,\n        escaped: false\n      };\n    },\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\nCodeMirror.defineMIME(\"text/yaml\", \"yaml\");\n\n});\n"],"sourceRoot":""}